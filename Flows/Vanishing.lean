/-
Copyright (c) 2021-2022 Julien Marquet. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Julien Marquet
-/

import Flows.Groundwork
import Flows.Term
import Flows.Subst
import Flows.Vehicle

open Classical

set_option codegen false

section

variable {Œ± Œ≤ : Type u}

def vanishing (Œ∏ : Subst Œ± Œ≤) :=
  ‚àÄ {x}, (Term.Var x : Term Œ± Œ≤) ‚Ä¢ Œ∏ ‚â† Term.Var x ‚Üí
    ‚àÄ y, ¬¨ (x ‚àà (ùí± ((Term.Var y : Term Œ± Œ≤) ‚Ä¢ Œ∏) : Fintype Œ≤))

theorem vanishing_on_term {Œ∏ : Subst Œ± Œ≤} (h‚ÇÅ : vanishing Œ∏)
  {x : Œ≤} (h‚ÇÇ : (Term.Var x : Term Œ± Œ≤) ‚Ä¢ Œ∏ ‚â† Term.Var x)
  (u : Term Œ± Œ≤) : ¬¨ x ‚àà (ùí± (u ‚Ä¢ Œ∏) : Fintype Œ≤) := by
  induction u with
  | Cst c => match Œ∏ with
    | ‚ü® Œ∏, h ‚ü© => intro h; exact h
  | Var y => exact h‚ÇÅ h‚ÇÇ _
  | Cons l r hl hr =>
    rw [subst_cons]
    intro h
    cases (Fintype.mem_union_iff _ _ _).1 h with
    | inl h => exact hl h
    | inr h => exact hr h

theorem vanishing_on_vehicle {Œ∏ : Subst Œ± Œ≤} (h‚ÇÅ : vanishing Œ∏)
  {x : Œ≤} (h‚ÇÇ : (Term.Var x : Term Œ± Œ≤) ‚Ä¢ Œ∏ ‚â† Term.Var x) :
  ¬¨ x ‚àà (ùí± Œ∏ : Fintype Œ≤) := by
  suffices h : ùí± Œ∏ ‚äÜ ùí± Œ∏ \ (Fintype.mk [x]) by
    apply Fintype.not_mem_iff_in_without.2
    exact h
  conv => lhs; simp only [HasVehicle.vehicle, Subst.vehicle]
  apply Fintype.image_in_of_all_in
  intro a h
  apply Fintype.included_trans _
    <| Fintype.included_without_of_included _
    <| Fintype.in_image_of_is_image h
  apply Fintype.not_mem_iff_in_without.1
  apply vanishing_on_term h‚ÇÅ h‚ÇÇ

theorem vanishing_respects_vehicle {Œ∏ : Subst Œ± Œ≤} (h‚ÇÅ : vanishing Œ∏) {x : Œ≤}
  (h‚ÇÇ : ¬¨ x ‚àà (ùí± Œ∏ : Fintype Œ≤)) {u : Term Œ± Œ≤} (h‚ÇÉ : ¬¨ x ‚àà (ùí± u : Fintype Œ≤)) :
  ¬¨ x ‚àà (ùí± (u ‚Ä¢ Œ∏) : Fintype Œ≤) := by
  apply Fintype.not_mem_of_superset_not_mem (vehicle_on_image Fintype.included_refl _)
  intro h
  rw [Fintype.mem_union_iff] at h
  exact match h with
  | Or.inl h => h‚ÇÇ h
  | Or.inr h => h‚ÇÉ h

theorem cons_vanishing {Œ∏ œÜ : Subst Œ± Œ≤} {l‚ÇÅ r‚ÇÅ l‚ÇÇ r‚ÇÇ : Term Œ± Œ≤}
  (h‚ÇÅ : (ùí± Œ∏ : Fintype Œ≤) ‚äÜ ùí± l‚ÇÅ ‚à™ ùí± l‚ÇÇ)
  (h‚ÇÇ : (ùí± œÜ : Fintype Œ≤) ‚äÜ ùí± (r‚ÇÅ ‚Ä¢ Œ∏) ‚à™ ùí± (r‚ÇÇ ‚Ä¢ Œ∏))
  (h‚ÇÉ : vanishing Œ∏) (h‚ÇÑ : vanishing œÜ) : vanishing (Œ∏ * œÜ) := by
  intro x hx y
  by_cases hŒ∏ : (Term.Var x : Term Œ± Œ≤) ‚Ä¢ Œ∏ = Term.Var x
  focus
    let p := show (Term.Var x : Term Œ± Œ≤) ‚Ä¢ œÜ ‚â† Term.Var x by
      intro hœÜ
      apply hx
      rw [‚Üê RAction.smul_mul, hŒ∏, hœÜ]
    rw [‚Üê RAction.smul_mul]
    apply vanishing_on_term h‚ÇÑ p
  focus
    let p := show ¬¨ x ‚àà (ùí± œÜ : Fintype Œ≤) by
      apply Fintype.not_mem_of_superset_not_mem h‚ÇÇ
      intro h
      rw [Fintype.mem_union_iff] at h
      exact match h with
      | Or.inl h => (vanishing_on_term h‚ÇÉ hŒ∏ r‚ÇÅ) h
      | Or.inr h => (vanishing_on_term h‚ÇÉ hŒ∏ r‚ÇÇ) h
    rw [‚Üê RAction.smul_mul]
    exact vanishing_respects_vehicle h‚ÇÑ p (h‚ÇÉ hŒ∏ _)

theorem elementary_vanishing {x : Œ≤} {u : Term Œ± Œ≤} {h‚ÇÅ : Term.Var x ‚â† u}
  (h‚ÇÇ : ¬¨ x ‚àà (ùí± u : Fintype Œ≤)) :
  vanishing (Subst.elementary h‚ÇÅ : Subst Œ± Œ≤) := by
  intro z hz t
  intro h'
  have p : z = x := by
    let p := carrier_spec.2 hz
    rw [elementary_carrier, Fintype.mem_mk_iff] at p
    simp_all [List.mem]
  rw [p] at h'
  by_cases p' : t = x
  focus
    rw [p'] at h'
    rw [Subst.elementary_spec‚ÇÅ] at h'
    exact h‚ÇÇ h'
  focus
    rw [Subst.elementary_spec‚ÇÇ _ p'] at h'
    apply Ne.symm p'
    simp_all [HasVehicle.vehicle, Term.vehicle, Fintype.mem_mk_iff, List.mem]

end

